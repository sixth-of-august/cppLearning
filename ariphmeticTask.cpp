/*
Автор - Лесков Н.Г

Задание:
Найти сумму членов арифметической прогрессии 
a, a+d, ..., a+(n-1)d по данным значениям a, d, n*/

#include <iostream> // библиотека ввода и вывода результата
#include <format> // библиотека для работы функции format
#include <cassert> // модуль для работы функции assert
#include "progression.h" // модуль с функцией

// используем пространство имён std
// так как там содержится стандартная библиотека
using namespace std;

// раскомментировать строку ниже, чтобы отключить assert()
// #define NDEBUG

// тело программы
int main(){
// функция assert будет возвращать true в случае верного выражения
// в случае false будет выдавать ошибку и не позволит продолжить выполнение программы
assert(getProgression(0, 0, 10) == 0);
assert(getProgression(1, 0, 3) == 3);
assert(getProgression(1, 1, 2) == 3);

// переменная first для первого члена прогресии
// переменная diff для разницы между членами
// переменная resultation для итога вычислений
double first = 0.0, diff = 0.0, resultation = 0.0;
int amount = 0; // переменная amount для количества элементов прогрессии 

// просим пользователя ввести первый член прогрессии
cout << "Введите первый член арифметической прогрессии: " << endl; 
cin >> first; // записываем значение в переменную

// просим пользователя ввести разницу между членами прогрессии
cout << "Введите разницу между прогрессиями: " << endl; 
cin >> diff; // записываем значение в переменную

// просим пользователя ввести количество членов прогрессии для подсчёта
cout << "Введите количество членов прогрессии для подсчёта" << endl;
cin >> amount; // записываем значение в переменную

// загоняем функцию в блок try
try{ // считаем и присваиваем значение
resultation = getProgression(first, diff, amount);
} 

// ловим ошибку в случае исключительной ситуации
catch (invalid_argument const &error){
    // выводим текст оишбки в консоль
    cout << "Произошла ошибка по время вызова функции getProgression..." << error.what() << endl;
}

// вывод результата на экран
cout << format("Результат прогрессии = {:.2f}", resultation) << endl;

// завершаем работу программы
return 0;
}

/*
создаём исполняемый файл с поддержкой стандартов языка С++20

g++ ariphmeticTask.cpp progression.cpp -o program.exe -std=c++20
1. Файл с кодом        2.Файл модуля   3.Исполняемый файл 

запускаем программу
./program 
*/